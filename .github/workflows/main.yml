name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx_Freeze
      - name: Build
        run: python setup.py build
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: build/exe.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref_name }}
            release_name: Release ${{ github.ref_name }}
            draft: false
            prerelease: false

        - name: Download artifacts
          uses: actions/download-artifact@v2

        - name: Upload artifacts to release
          uses: actions/github-script@v5
          with:
            script: |
              const fs = require('fs');
              const artifactPath = '${{github.workspace}}/artifact';
              const files = fs.readdirSync(artifactPath);
              for (const file of files) {
                const filePath = `${artifactPath}/${file}`;
                if (fs.lstatSync(filePath).isDirectory()) {
                continue;
                }
                const fileStream = fs.createReadStream(filePath);
                await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{steps.create_release.outputs.id}},
                name: file,
                data: fileStream,
                });
              }
